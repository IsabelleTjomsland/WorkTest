@page "/edit-modbus-device"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit Modbus Device</h3>

<div>
    <label for="startAddress">Start Address:</label>
    <input type="number" id="startAddress" @bind="device.StartAddress" class="form-control" />
</div>

<div>
    <label for="status">Status:</label>
    <select id="status" @bind="device.Value" class="form-control">
        <option value="1">On</option>
        <option value="0">Off</option>
    </select>
</div>

<div>
    <label for="name">Name:</label>
    <input type="text" id="name" @bind="device.Alias" class="form-control" />
</div>

<div style="margin-top: 20px;">
    <button @onclick="SaveDevice" class="btn btn-primary">Save</button>
    <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
</div>

@code {
    [Parameter] public ushort StartAddress { get; set; }

    private ModbusReadResponse device = new ModbusReadResponse();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the device data based on the StartAddress passed from the URL
        var response = await Http.GetFromJsonAsync<ModbusReadResponse>($"http://localhost:5246/api/modbus/read-register?startAddress={StartAddress}");
        device = response ?? new ModbusReadResponse();
    }

    private async Task SaveDevice()
    {
        try
        {
            // Send the updated device data to the server
            var response = await Http.PutAsJsonAsync("http://localhost:5246/api/modbus/update-register", device);
            
            if (response.IsSuccessStatusCode)
            {
                // Navigate to the modbus communication page after a successful save
                Navigation.NavigateTo("/modbus-communication");
            }
            else
            {
                // Handle failure to save (e.g., show a message to the user)
                Console.WriteLine("Error: Failed to update the Modbus device.");
            }
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., show an error message to the user)
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/modbus-communication");
    }

    private class ModbusReadResponse
    {
        public ushort StartAddress { get; set; }
        public ushort Value { get; set; }
        public string Alias { get; set; } = "";
    }
}
