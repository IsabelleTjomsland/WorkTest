@page "/login"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="form-group position-relative">
        <label for="password">Password</label>
        <InputText id="password"
                   class="form-control pe-5"
                   @bind-Value="loginModel.Password"
                   type="@passwordInputType" />

        <img src="@eyeIcon"
             @onclick="TogglePasswordVisibility"
             style="position: absolute; right: 10px; top: 30px; width: 24px; height: 24px; cursor: pointer;" />
    </div>

    <div class="mt-4"> 
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";
    private string eyeIcon => isPasswordVisible ? "closed.svg" : "eye.svg";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5246/api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<LoginResponse>();
                var token = responseData?.Token;

                if (!string.IsNullOrEmpty(token))
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwtToken", token);
                    await AuthStateProvider.MarkUserAsAuthenticated(token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Failed to retrieve token.";
                }
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
