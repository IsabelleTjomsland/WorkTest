@page "/modbus-communication"
@inject HttpClient Http

<h3 style="font-size: 2em; font-weight: 600; background: linear-gradient(90deg, #013067, #3e85d6); background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-align: left; margin-top: 2rem; margin-bottom: 4rem;">
    Modbus Communication
</h3>

<div>
    <label for="addressSelect">Select Register Address:</label>
    <select id="addressSelect" @bind="registerAddress" class="form-control">
        @foreach (var address in availableAddresses)
        {
            <option value="@address">@address</option>
        }
    </select>
</div>

<!-- Adding space between the dropdown and the button -->
<div style="margin-top: 20px;">
    <button @onclick="FindDevice" class="btn btn-primary">Find Device</button>
</div>

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

@if (deviceData != null)
{
    <table class="table table-striped custom-table" style="margin-top: 20px;">
        <thead>
            <tr>
                <th class="column">Address</th>
                <th class="column">Status</th>
                <th class="column">Name</th>
                <th class="column">Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@deviceData.StartAddress</td>
                <td>
                    <span style="display: inline-block; width: 10px; height: 10px; border-radius: 50%; background-color: @(deviceData.Value == 1 ? "green" : "red");"></span>
                    @(deviceData.Value == 1 ? "On" : "Off")
                </td>
                <td>@deviceData.Alias</td>
                <td>
                    <!-- Creating a link to the EditModbusDevice page -->
                    <a href="/edit-modbus-device" class="btn btn-primary btn-sm">Edit</a>
                </td>
            </tr>
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    private ushort registerAddress;
    private ModbusReadResponse? deviceData;
    private string? errorMessage;
    private List<ushort> availableAddresses = Enumerable.Range(1, 10).Select(x => (ushort)x).ToList();

    private async Task FindDevice()
    {
        // Validate the registerAddress before making the request
        if (registerAddress == 0)
        {
            errorMessage = "Please select a valid address.";
            return;
        }

        try
        {
            errorMessage = null;
            var response = await Http.GetFromJsonAsync<ModbusReadResponse>($"http://localhost:5246/api/modbus/read-register?startAddress={registerAddress}");
            
            if (response != null)
            {
                deviceData = response;
            }
            else
            {
                throw new Exception("No data returned from the server.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error fetching device data: " + ex.Message;
        }
    }

    private class ModbusReadResponse
    {
        public ushort StartAddress { get; set; }
        public ushort Value { get; set; }
        public string Alias { get; set; } = "";
    }
}
