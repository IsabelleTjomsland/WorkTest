@page "/modbus-communication"
@inject HttpClient Http

<h3 style="font-size: 2em; font-weight: 600; background: linear-gradient(90deg, #013067, #3e85d6); background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-align: left; margin-top: 2rem; margin-bottom: 4rem;">
    Modbus Communication
</h3>

<div style="margin-bottom: 20px;">
    <label for="addressSelect" style="display: block;">Select Register Address:</label>
    <div style="display: flex; align-items: center;">
        <select id="addressSelect" @bind="registerAddress" class="form-control" style="width: 200px; margin-right: 10px;">
            @foreach (var address in availableAddresses)
            {
                <option value="@address">@address</option>
            }
        </select>
        <button @onclick="FindDevice" class="btn btn-primary">Find Device</button>
    </div>
</div>

<div style="margin-top: 30px;">
    <button @onclick="GetAllDevices" class="btn btn-secondary">All Devices</button>
</div>

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

@if (deviceData != null && allDevices.Count == 0)
{
    <table class="table table-striped custom-table" style="margin-top: 20px;">
        <thead>
            <tr>
                <th class="column">Address</th>
                <th class="column">Status</th>
                <th class="column">Name</th>
                <th class="column">Change status</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@deviceData.StartAddress</td>
                <td>
                    <span style="display: inline-block; width: 10px; height: 10px; border-radius: 50%; background-color: @(deviceData.Value == 1 ? "green" : "red");"></span>
                    @(deviceData.Value == 1 ? "On" : "Off")
                </td>
                <td>@deviceData.Alias</td>
                <td>
                    <label class="switch">
                        <input type="checkbox" checked="@(deviceData.Value == 1)"
                               @onchange="(e => ToggleDeviceStatus(deviceData, e.Value is bool b && b))" />
                        <span class="slider"></span>
                    </label>
                </td>
            </tr>
        </tbody>
    </table>
}

@if (allDevices.Any())
{
    <table class="table table-striped custom-table" style="margin-top: 20px;">
        <thead>
            <tr>
                <th class="column">Address</th>
                <th class="column">Status</th>
                <th class="column">Name</th>
                <th class="column">Change status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in allDevices)
            {
                <tr>
                    <td>@device.StartAddress</td>
                    <td>
                        <span style="display: inline-block; width: 10px; height: 10px; border-radius: 50%; background-color: @(device.Value == 1 ? "green" : "red");"></span>
                        @(device.Value == 1 ? "On" : "Off")
                    </td>
                    <td>@device.Alias</td>
                    <td>
                        <label class="switch">
                            <input type="checkbox" checked="@(device.Value == 1)"
                                   @onchange="(e => ToggleDeviceStatus(device, e.Value is bool b && b))" />
                            <span class="slider"></span>
                        </label>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (deviceData == null)
{
    <p>Loading...</p>
}

@code {
    private ushort registerAddress;
    private ModbusReadResponse? deviceData;
    private List<ModbusReadResponse> allDevices = new();
    private string? errorMessage;
    private List<ushort> availableAddresses = Enumerable.Range(1, 10).Select(x => (ushort)x).ToList();

    protected override async Task OnInitializedAsync()
    {
        await GetAllDevices();  // This will load all devices when the page is initialized
    }

    private async Task FindDevice()
    {
        if (registerAddress == 0)
        {
            errorMessage = "Please select a valid address.";
            return;
        }

        try
        {
            errorMessage = null;
            var response = await Http.GetFromJsonAsync<ModbusReadResponse>($"http://localhost:5246/api/modbus/read-register?startAddress={registerAddress}");
            if (response != null)
            {
                deviceData = response;
                allDevices.Clear(); // clear any previously shown full list
            }
            else
            {
                throw new Exception("No data returned from the server.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error fetching device data: " + ex.Message;
        }
    }

    private async Task GetAllDevices()
    {
        allDevices.Clear();
        deviceData = null;

        foreach (var address in availableAddresses)
        {
            try
            {
                var response = await Http.GetFromJsonAsync<ModbusReadResponse>($"http://localhost:5246/api/modbus/read-register?startAddress={address}");
                if (response != null)
                {
                    allDevices.Add(response);
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error fetching device at address {address}: {ex.Message}";
            }
        }
    }

    private async Task ToggleDeviceStatus(ModbusReadResponse device, bool isChecked)
    {
        try
        {
            device.Value = (ushort)(isChecked ? 1 : 0);

            var response = await Http.PutAsJsonAsync("http://localhost:5246/api/modbus/update-register", device);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Failed to update device at address {device.StartAddress}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating device: {ex.Message}";
        }
    }

    private class ModbusReadResponse
    {
        public ushort StartAddress { get; set; }
        public ushort Value { get; set; }
        public string Alias { get; set; } = "";
    }
}

<style>
    /* Add padding to table cells for more space between columns */
    .table th, .table td {
        padding: 20px 30px; /* Adjust padding as needed */
    }

    /* Switch button styles */
    .switch {
        position: relative;
        display: inline-block;
        width: 34px;
        height: 20px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 12px;
        width: 12px;
        border-radius: 50%;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
    }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:checked + .slider:before {
        transform: translateX(14px);
    }
</style>
