@page "/devices-management"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="mb-4 gradient-text" style="margin-bottom: 8rem;">Devices management</h3>

<button class="btn btn-primary mb-5" @onclick="NavigateToCreateDevice">Create a new device</button>

@if (devices == null)
{
    <p>Loading...</p>
}
else if (devices.Count == 0)
{
    <p>No devices found.</p>
}
else
{
    <table class="table table-striped custom-table">
        <thead>
            <tr>
                <th class="column" @onclick="() => SortById()">
                    ID
                    @if (sortBy == "Id")
                    {
                        <span class="arrow">@(sortDirection == "asc" ? "▼" : "▲")</span>
                    }
                </th>
                <th class="column" @onclick="() => SortByName()">
                    Name
                    @if (sortBy == "Name")
                    {
                        <span class="arrow">@(sortDirection == "asc" ? "▼" : "▲")</span>
                    }
                </th>
                <th class="column" @onclick="() => SortByStatus()">
                    Status
                    @if (sortBy == "Status")
                    {
                        <span class="arrow">@(sortDirection == "asc" ? "▼" : "▲")</span>
                    }
                </th>
                <th class="column-actions text-end"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Id</td>
                    <td>@device.Name</td>
                    <td>
                        @if (device.Status)
                        {
                            <span class="status-circle on"></span> @("On")
                        }
                        else
                        {
                            <span class="status-circle off"></span> @("Off")
                        }
                    </td>
                    <td class="text-end">
                        <button class="btn btn-success btn-sm" @onclick="() => NavigateToDetails(device.Id)">Details</button> |
                        <button class="btn btn-primary btn-sm" @onclick="() => NavigateToEdit(device.Id)">Edit</button> |
                        <button class="btn btn-danger btn-sm" @onclick="() => NavigateToDelete(device.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Device> devices = new();
    private string sortBy = "Id"; 
    private string sortDirection = "asc"; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            devices = await Http.GetFromJsonAsync<List<Device>>("http://localhost:5246/api/devices");
            SortDevices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void SortDevices()
    {
        if (sortBy == "Id")
        {
            devices = sortDirection == "asc" ? devices.OrderBy(d => d.Id).ToList() : devices.OrderByDescending(d => d.Id).ToList();
        }
        else if (sortBy == "Name")
        {
            devices = sortDirection == "asc" ? devices.OrderBy(d => d.Name).ToList() : devices.OrderByDescending(d => d.Name).ToList();
        }
        else if (sortBy == "Status")
        {
            devices = sortDirection == "asc" ? devices.OrderBy(d => d.Status).ToList() : devices.OrderByDescending(d => d.Status).ToList();
        }
    }

    private void SortById()
    {
        if (sortBy == "Id")
        {
            sortDirection = sortDirection == "asc" ? "desc" : "asc"; 
        }
        else
        {
            sortBy = "Id";
            sortDirection = "asc"; 
        }
        SortDevices();
    }

    private void SortByName()
    {
        if (sortBy == "Name")
        {
            sortDirection = sortDirection == "asc" ? "desc" : "asc"; 
        }
        else
        {
            sortBy = "Name";
            sortDirection = "asc"; 
        }
        SortDevices();
    }

    private void SortByStatus()
    {
        if (sortBy == "Status")
        {
            sortDirection = sortDirection == "asc" ? "desc" : "asc"; 
        }
        else
        {
            sortBy = "Status";
            sortDirection = "asc"; 
        }
        SortDevices();
    }

    private void NavigateToCreateDevice() => Navigation.NavigateTo("/create-device");
    private void NavigateToEdit(int id) => Navigation.NavigateTo($"/edit-device?id={id}");
    private void NavigateToDetails(int id) => Navigation.NavigateTo($"/device-details?id={id}");
    private void NavigateToDelete(int id) => Navigation.NavigateTo($"/delete-device?id={id}");

    public class Device
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool Status { get; set; }
    }
}

<style>
    
    .custom-table th, .custom-table td {
        padding-left: 40px;  /* Increased left padding */
        padding-right: 40px; /* Increased right padding */
    }

    .column {
        padding-left: 40px;  /* Increased left padding for each column */
        padding-right: 40px; /* Increased right padding for each column */
    }

    .text-end {
        text-align: right; /* Align the Actions column to the right */
    }

    /* Style for the arrows */
    .arrow {
        display: inline-block;
        font-size: 18px;
        font-weight: bold;
        background: linear-gradient(135deg, #6e7db3, #1e3a5f); /* Blue gradient */
        -webkit-background-clip: text; /* Clip the background to the text */
        color: transparent; /* Make text transparent to show the gradient */
        transition: transform 0.2s ease-in-out;
    }

    .arrow:hover {
        transform: scale(1.2); /* Slightly enlarge the arrow on hover */
    }

    /* Style for the status circle */
    .status-circle {
        display: inline-block;
        width: 10px; /* Small circle size */
        height: 10px; /* Small circle size */
        border-radius: 50%; /* Make it circular */
        margin-right: 5px; /* Space between circle and text */
    }

    /* Green circle for "On" status */
    .status-circle.on {
        background-color: green;
    }

    /* Red circle for "Off" status */
    .status-circle.off {
        background-color: red;
    }

    /* Apply the gradient text style to the h3 element */
    .gradient-text {
        font-size: 2em;
        font-weight: 600;
        background: linear-gradient(90deg, #013067, #3e85d6);
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
</style>
