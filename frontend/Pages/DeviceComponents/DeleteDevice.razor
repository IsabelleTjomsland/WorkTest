@page "/delete-device"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Delete Device</h3>

@if (device == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card p-3">
        <p><strong>Are you sure you want to delete this device?</strong></p>
        <p><strong>ID:</strong> @device.Id</p>
        <p><strong>Name:</strong> @device.Name</p>
        <p><strong>Status:</strong> @(device.Status ? "On" : "Off")</p>

        <!-- Buttons aligned next to each other -->
        <div class="d-flex justify-content-start mt-3">
            <button class="btn btn-danger me-2" @onclick="DeleteCurrentDevice">Delete</button>
            <button class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
        </div>
    </div>
}

@code {
    /// <summary>
    /// The device to be deleted.
    /// </summary>
    private Device device;

    /// <summary>
    /// This method is called when the component is initialized.
    /// It fetches the device details based on the ID passed in the query string.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var idString = query.Get("id");

        if (int.TryParse(idString, out int deviceId))
        {
            try
            {
                // Fetch the device details from the API
                device = await Http.GetFromJsonAsync<Device>($"http://localhost:5246/api/devices/{deviceId}");
            }
            catch (Exception ex)
            {
                // Log any errors that occur during fetching the device
                Console.WriteLine($"Error fetching device: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Deletes the current device and navigates back to the device management page.
    /// </summary>
    private async Task DeleteCurrentDevice()
    {
        try
        {
            // Delete the device from the API
            await Http.DeleteAsync($"http://localhost:5246/api/devices/{device.Id}");
            Navigation.NavigateTo("/devices-management");
        }
        catch (Exception ex)
        {
            // Log any errors during the delete process
            Console.WriteLine($"Error deleting device: {ex.Message}");
        }
    }

    /// <summary>
    /// Navigates back to the device management page without deleting the device.
    /// </summary>
    private void NavigateBack() => Navigation.NavigateTo("/devices-management");

    /// <summary>
    /// Represents a device with an ID, Name, and Status.
    /// </summary>
    public class Device
    {
        /// <summary>
        /// The unique identifier of the device.
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// The name of the device.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The status of the device (true if the device is on, false if it is off).
        /// </summary>
        public bool Status { get; set; }
    }
}
